package cn.cbsd.dogtag.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cbsd.dogtag.Data.MyBitmapListConvert;
import java.util.List;

import cn.cbsd.dogtag.Data.DogViolationBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOG_VIOLATION_BEAN".
*/
public class DogViolationBeanDao extends AbstractDao<DogViolationBean, Long> {

    public static final String TABLENAME = "DOG_VIOLATION_BEAN";

    /**
     * Properties of entity DogViolationBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PersonName = new Property(1, String.class, "personName", false, "PERSON_NAME");
        public final static Property PersonId = new Property(2, String.class, "personId", false, "PERSON_ID");
        public final static Property DogName = new Property(3, String.class, "dogName", false, "DOG_NAME");
        public final static Property DealStatus = new Property(4, String.class, "dealStatus", false, "DEAL_STATUS");
        public final static Property Violation_message = new Property(5, String.class, "violation_message", false, "VIOLATION_MESSAGE");
        public final static Property DogTag = new Property(6, String.class, "dogTag", false, "DOG_TAG");
        public final static Property DealContent = new Property(7, String.class, "dealContent", false, "DEAL_CONTENT");
        public final static Property Date = new Property(8, String.class, "date", false, "DATE");
        public final static Property Bitmaps = new Property(9, String.class, "bitmaps", false, "BITMAPS");
    }

    private final MyBitmapListConvert bitmapsConverter = new MyBitmapListConvert();

    public DogViolationBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DogViolationBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOG_VIOLATION_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PERSON_NAME\" TEXT," + // 1: personName
                "\"PERSON_ID\" TEXT," + // 2: personId
                "\"DOG_NAME\" TEXT," + // 3: dogName
                "\"DEAL_STATUS\" TEXT," + // 4: dealStatus
                "\"VIOLATION_MESSAGE\" TEXT," + // 5: violation_message
                "\"DOG_TAG\" TEXT," + // 6: dogTag
                "\"DEAL_CONTENT\" TEXT," + // 7: dealContent
                "\"DATE\" TEXT," + // 8: date
                "\"BITMAPS\" TEXT);"); // 9: bitmaps
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOG_VIOLATION_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DogViolationBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String personName = entity.getPersonName();
        if (personName != null) {
            stmt.bindString(2, personName);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String dogName = entity.getDogName();
        if (dogName != null) {
            stmt.bindString(4, dogName);
        }
 
        String dealStatus = entity.getDealStatus();
        if (dealStatus != null) {
            stmt.bindString(5, dealStatus);
        }
 
        String violation_message = entity.getViolation_message();
        if (violation_message != null) {
            stmt.bindString(6, violation_message);
        }
 
        String dogTag = entity.getDogTag();
        if (dogTag != null) {
            stmt.bindString(7, dogTag);
        }
 
        String dealContent = entity.getDealContent();
        if (dealContent != null) {
            stmt.bindString(8, dealContent);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(9, date);
        }
 
        List bitmaps = entity.getBitmaps();
        if (bitmaps != null) {
            stmt.bindString(10, bitmapsConverter.convertToDatabaseValue(bitmaps));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DogViolationBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String personName = entity.getPersonName();
        if (personName != null) {
            stmt.bindString(2, personName);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String dogName = entity.getDogName();
        if (dogName != null) {
            stmt.bindString(4, dogName);
        }
 
        String dealStatus = entity.getDealStatus();
        if (dealStatus != null) {
            stmt.bindString(5, dealStatus);
        }
 
        String violation_message = entity.getViolation_message();
        if (violation_message != null) {
            stmt.bindString(6, violation_message);
        }
 
        String dogTag = entity.getDogTag();
        if (dogTag != null) {
            stmt.bindString(7, dogTag);
        }
 
        String dealContent = entity.getDealContent();
        if (dealContent != null) {
            stmt.bindString(8, dealContent);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(9, date);
        }
 
        List bitmaps = entity.getBitmaps();
        if (bitmaps != null) {
            stmt.bindString(10, bitmapsConverter.convertToDatabaseValue(bitmaps));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DogViolationBean readEntity(Cursor cursor, int offset) {
        DogViolationBean entity = new DogViolationBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // personName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dogName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dealStatus
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // violation_message
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // dogTag
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // dealContent
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // date
            cursor.isNull(offset + 9) ? null : bitmapsConverter.convertToEntityProperty(cursor.getString(offset + 9)) // bitmaps
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DogViolationBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPersonName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDogName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDealStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setViolation_message(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDogTag(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDealContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBitmaps(cursor.isNull(offset + 9) ? null : bitmapsConverter.convertToEntityProperty(cursor.getString(offset + 9)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DogViolationBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DogViolationBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DogViolationBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
